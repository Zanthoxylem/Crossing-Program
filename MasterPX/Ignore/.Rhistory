tk
write.csv(tk, file = "INFSPA2022dunn.CSV")
#Comp of means using ANOVA with no Crop
library(pacman)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
inf22 <- subset(act22, STAGE == "INFIELD")
inf22$VARIETY <- as.factor(inf22$VARIETY)
inf22$CROP <- as.factor(inf22$CROP)
# Convert the column to a factor with levels in alphabetical order
inf22$LOC_NUM <- factor(inf22$LOC, levels = unique(sort(inf22$LOC)))
# Convert the factor levels to numerical values
inf22$LOC_NUM <- as.numeric(inf22$LOC_NUM)
# Print the result
inf22
unique_counts <- aggregate(TRS_TON ~ VARIETY + LOC, data = inf22, function(x) length(unique(x)))
print(unique_counts)
shapiro.test(inf22$TRS_TON)
hist(inf22$TRS_TON)
qqnorm(inf22$TRS_TON)
qqline(inf22$TRS_TON, col = "red")
table(inf22$VARIETY, inf22$LOC)
fit <- lmer(TRS_TON ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = inf22)
summary(fit)
anova(fit)
(outlier <- names(outlierTest(fit)$p))
inf22[outlier, "TRS_TON" ]<- NA
resid <- residuals(fit)
shapiro.test(resid)
plot(fit, resid = TRUE, sqrt(abs(resid(.))) ~ fitted(.))
emm <- emmeans(fit, ~ VARIETY|LOC|CROP)
summary(emm)
# Perform the Tukey-Kramer test
tk <- cld(emm, Letters = letters, adjust = "dunn")
# Print the results
tk
#Comp of means using ANOVA with no Crop
library(pacman)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
nurs22 <- subset(act22, STAGE == "NURSERY")
nurs22$VARIETY <- as.factor(nurs22$VARIETY)
nurs22$CROP <- as.factor(nurs22$CROP)
# Convert the column to a factor with levels in alphabetical order
nurs22$LOC_NUM <- factor(nurs22$LOC, levels = unique(sort(nurs22$LOC)))
# Convert the factor levels to numerical values
nurs22$LOC_NUM <- as.numeric(nurs22$LOC_NUM)
# Print the result
nurs22
##For Economic Index
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(TRS_TON ~ VARIETY + LOC, data = nurs22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the Econ variable and plot a histogram
shapiro.test(nurs22$TRS_TON)
hist(nurs22$TRS_TON)
# Plot a Q-Q plot of the Econ variable
qqnorm(nurs22$TRS_TON)
qqline(nurs22$TRS_TON, col = "red")
# Load the 'car' package
table(nurs22$VARIETY, nurs22$LOC)
# Fit the linear mixed model
fit <- lmer(TRS_TON ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = nurs22)
summary(fit)
anova(fit)
(outlier <- names(outlierTest(fit)$p))
nurs22[outlier, "TRS_TON" ]<- NA
# Extract the residuals
resid <- residuals(fit)
# Test for normality of residuals
shapiro.test(resid)
# Test for homogeneity of variances by plotting
plot(fit, resid = TRUE, sqrt(abs(resid(.))) ~ fitted(.))
emm <- emmeans(fit, ~ VARIETY|LOC|CROP)
summary(emm)
# Perform the Tukey-Kramer test
tk <- cld(emm, Letters = letters, adjust = "dunn")
dunnett <- glht(fit, linfct = mcp(CROP = "Dunnett"), alternative = "two.sided")
summary <- summary(dunnett, test = adjusted(type = "holm"))
print(summary)
emm <- emmeans(fit, ~ CROP|VARIETY|LOC, reference = list(VARIETY = "2001299"))
#Comp of means using ANOVA with no Crop
library(pacman)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# Print the result
out22
##For Economic Index
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(TRS_TON ~ VARIETY + LOC, data = out22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the Econ variable and plot a histogram
shapiro.test(out22$TRS_TON)
hist(out22$TRS_TON)
# Plot a Q-Q plot of the Econ variable
qqnorm(out22$TRS_TON)
qqline(out22$TRS_TON, col = "red")
# Load the 'car' package
table(out22$VARIETY, out22$LOC)
# Fit the linear mixed model
fit <- lmer(TRS_TON ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = out22)
summary(fit)
anova(fit)
(outlier <- names(outlierTest(fit)$p))
out22[outlier, "TRS_TON" ]<- NA
# Extract the residuals
resid <- residuals(fit)
# Test for normality of residuals
shapiro.test(resid)
# Test for homogeneity of variances by plotting
plot(fit, resid = TRUE, sqrt(abs(resid(.))) ~ fitted(.))
emm <- emmeans(fit, ~ CROP|VARIETY|LOC, reference = list(VARIETY = "2001299"))
summary(emm)
# Perform the Dunnett's test
dunnett <- dunnettTest(fit, trt = emm, control = "2001299")
emm <- emmeans(fit, ~ VARIETY|LOC|CROP, reference = list(VARIETY = "2001299"))
dunnett <- dunnettTest(fit, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
install.packages("DescTools")
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
library(DescTools)
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
data <- as.vector(resid(fit)) + as.vector(fixef(fit))
groups <- interaction(out22$VARIETY, out22$LOC, out22$CROP)
dunnett <- DunnettTest(data, g = groups, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, g = groups, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, g = groups, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, g = groups, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
dunnett <- DunnettTest(fit, trt = emm, control = "2001299")
#Comp of means using ANOVA with no Crop
library(pacman)
library(DescTools)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
inf22 <- subset(act22, STAGE == "INFIELD")
inf22$VARIETY <- as.factor(inf22$VARIETY)
inf22$CROP <- as.factor(inf22$CROP)
# Convert the column to a factor with levels in alphabetical order
inf22$LOC_NUM <- factor(inf22$LOC, levels = unique(sort(inf22$LOC)))
# Convert the factor levels to numerical values
inf22$LOC_NUM <- as.numeric(inf22$LOC_NUM)
# Print the result
inf22
##For Economic Index
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(TCA ~ VARIETY + LOC, data = inf22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the Econ variable and plot a histogram
shapiro.test(inf22$TCA)
hist(inf22$TCA)
# Plot a Q-Q plot of the Econ variable
qqnorm(inf22$TCA)
qqline(inf22$TCA, col = "red")
# Load the 'car' package
table(inf22$VARIETY, inf22$LOC)
# Fit the linear mixed model
fit <- lmer(TCA ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = inf22)
summary(fit)
anova(fit)
(outlier <- names(outlierTest(fit)$p))
inf22[outlier, "TCA" ]<- NA
# Extract the residuals
resid <- residuals(fit)
# Test for normality of residuals
shapiro.test(resid)
# Test for homogeneity of variances by plotting
plot(fit, resid = TRUE, sqrt(abs(resid(.))) ~ fitted(.))
emm <- emmeans(fit, ~ VARIETY|LOC|CROP, reference = list(VARIETY = "2001299"))
summary(emm)
tk <- cld(emm, Letters = letters, adjust = "dunn")
#write.csv(tk, file = "inftca2022dunn.CSV")
write.csv(tk, file = "inftca2022dunn.CSV")
#Comp of means using ANOVA with no Crop
library(pacman)
library(DescTools)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# Print the result
out22
##For Economic Index
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(TCA ~ VARIETY + LOC, data = out22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the Econ variable and plot a histogram
shapiro.test(out22$TCA)
hist(out22$TCA)
# Plot a Q-Q plot of the Econ variable
qqnorm(out22$TCA)
qqline(out22$TCA, col = "red")
# Load the 'car' package
table(out22$VARIETY, out22$LOC)
# Fit the linear mixed model
fit <- lmer(TCA ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = out22)
summary(fit)
anova(fit)
(outlier <- names(outlierTest(fit)$p))
out22[outlier, "TCA" ]<- NA
View(act22)
View(act22)
#Comp of means using ANOVA with no Crop
library(pacman)
library(DescTools)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# create a vector of traits
traits <- c("T_SPACRE", "TCA", "TRS_TON", "MSTWT", "POPN")
for (trait in traits) {
cat("###", trait, "###\n")
# Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# Print the result
out22
##For the current trait
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(get(trait) ~ VARIETY + LOC, data = out22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the trait variable and plot a histogram
shapiro.test(out22[[trait]])
hist(out22[[trait]])
# Plot a Q-Q plot of the trait variable
qqnorm(out22[[trait]])
qqline(out22[[trait]], col = "red")
# Load the 'car' package
table(out22$VARIETY, out22$LOC)
# Fit the linear mixed model
fit <- lmer(get(trait) ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = out22)
summary(fit)
anova(fit)
# Detect and remove outliers
outlier <- names(outlierTest(fit)$p)
out22[outlier, trait] <- NA
}
summary(fit)
anova(fit)
outlier <- names(outlierTest(fit)$p)
out22[outlier, trait] <- NA
#Comp of means using ANOVA with no Crop
library(pacman)
library(DescTools)
pacman::p_load(readxl, dplyr, lme4, emmeans, easypackages, tidyverse, PerformanceAnalytics, multcomp, broom.mixed, car, multcomp)
##############FB15M############################
#Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# create a vector of traits
traits <- c("T_SPACRE", "TCA", "TRS_TON", "MSTWT", "POPN")
for (trait in traits) {
cat("###", trait, "###\n")
# Import and filter data
act22 <- read.csv("~/Coding Projects/Active File/Active22/act22.csv")
out22 <- subset(act22, STAGE == "OUTFIELD")
out22$VARIETY <- as.factor(out22$VARIETY)
out22$CROP <- as.factor(out22$CROP)
# Convert the column to a factor with levels in alphabetical order
out22$LOC_NUM <- factor(out22$LOC, levels = unique(sort(out22$LOC)))
# Convert the factor levels to numerical values
out22$LOC_NUM <- as.numeric(out22$LOC_NUM)
# Print the result
out22
##For the current trait
# Count the number of unique values of each variety in each location
unique_counts <- aggregate(get(trait) ~ VARIETY + LOC, data = out22, function(x) length(unique(x)))
print(unique_counts)
# Check normality of the trait variable and plot a histogram
shapiro.test(out22[[trait]])
hist(out22[[trait]])
# Plot a Q-Q plot of the trait variable
qqnorm(out22[[trait]])
qqline(out22[[trait]], col = "red")
# Load the 'car' package
table(out22$VARIETY, out22$LOC)
# Fit the linear mixed model
fit <- lmer(get(trait) ~ VARIETY * LOC * CROP + (1|VARIETY:LOC) + (1|CROP:LOC), data = out22)
summary(fit)
anova(fit)
# Compute the estimated marginal means
emmeans_fit <- emmeans(fit, ~ VARIETY * LOC * CROP)
# Print the estimated marginal means
print(emmeans_fit)
# Detect and remove outliers
outlier <- names(outlierTest(fit)$p)
out22[outlier, trait] <- NA
}
PED <- read.csv("~/Coding Projects/PEDigree/PED.csv", na.strings = c("", "NA"))
library(pedigreemm)
library(dplyr)
library(readr)
library(kinship2)
# Replace "-" and "*" with NA in all columns
PED <- PED %>% mutate_all(~na_if(gsub("[-*]", "", .), ""))
PED <- PED %>% mutate(LineName = gsub(" ", "", LineName),
MaleParent = gsub(" ", "", MaleParent),
FemaleParent = gsub(" ", "", FemaleParent))
PED <- PED %>% mutate(is_orphan = ifelse(is.na(MaleParent) & is.na(FemaleParent), "yes", "no"))
PED <- PED %>% mutate(is_ancestral = ifelse(is_orphan == "yes" & (LineName %in% unique(c(PED$MaleParent)) | LineName %in% unique(c(PED$FemaleParent))), "ANCESTRAL", "no"))
PED <- PED %>% filter(!(is_orphan == "yes" & is_ancestral == "no"))
# Keep only the first three columns of the data frame
PED2 <- PED %>% select(LineName, MaleParent, FemaleParent)
#write.table(PED2, "PEDNOSPACE.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
PED2[duplicated(PED2$LineName) | duplicated(PED2$LineName, fromLast = TRUE), ]
# Remove all duplicates in the LineName column
ped3 <- PED2 %>% distinct(LineName, .keep_all = TRUE)
ped4 <- ped3 %>% filter(MaleParent %in% LineName)
ped5 <- subset(ped3, is.na(FemaleParent) | is.na(MaleParent) | !(LineName == FemaleParent | LineName == MaleParent))
px2 <- PX[, c("VARIETY", "TRS_TON", "TCA")]
# read in the pedigree data
PX  <- read.csv("~/Coding Projects/Improving the Breeding Program/MasterPX/ZT_MasterPX.csv")
head(PX, 15)
tail(PX)
str(PX)
# keep only columns x and z
px2 <- PX[, c("VARIETY", "TRS_TON", "TCA")]
library(stringr)
PX$FYR <- str_extract(PX$FEMALE, "[A-Z]\\d{2}-(\\d+)") %>% str_extract("\\d{2}")
PX$MYR <- str_extract(PX$MALE, "[A-Z]\\d{2}-(\\d+)") %>% str_extract("\\d{2}")
PX$FCENT <- ifelse(PX$FYR > 50, 19, 20)
PX$MCENT <- ifelse(PX$MYR > 50, 19, 20)
PX$FYEAR <- as.numeric(paste0(PX$FCENT, PX$FYR))
PX$MYEAR <- as.numeric(paste0(PX$MCENT, PX$MYR))
PX$FVAR <- ifelse(PX$FEMALE == "N27", "N27", as.numeric(gsub("-", "", paste0(PX$FYEAR, str_extract(PX$FEMALE, "-(\\d+)")))))
PX$MVAR <- ifelse(PX$MALE == "N27", "N27", as.numeric(gsub("-", "", paste0(PX$MYEAR, str_extract(PX$MALE, "-(\\d+)")))))
PX <- PX[, c("VARIETY", "FVAR", "MVAR")]
PX <- apply(PX, 2, as.numeric)
PX <- data.frame(PX)
View(PX)
View(PX)
PX  <- read.csv("~/Coding Projects/Improving the Breeding Program/MasterPX/ZT_MasterPX.csv")
head(PX, 15)
tail(PX)
str(PX)
# keep only columns x and z
px2 <- PX[, c("VARIETY", "TRS_TON", "TCA")]
PX  <- read.csv("~/Coding Projects/Improving the Breeding Program/MasterPX/ZT_MasterPX.csv")
head(PX, 15)
tail(PX)
str(PX)
# keep only columns x and z
px2 <- PX[, c("VARIETY", "TRS_TON", "TCA")]
PX <- PX[, c("VARIETY", "FEMALE", "MALE")]
PX <- PX %>% mutate(LineName = gsub("-", "", VARIETY),
MaleParent = gsub("-", "", MALE),
FemaleParent = gsub("-", "", FEMALE))
PX <- PX[, c("LineName", "FemaleParent", "MaleParent")]
PX <- PX[, c("LineName", "FemaleParent", "MaleParent")]
PX <- data.frame(PX)
ped6 <- merge(ped5, PX, by = "LineName")
# print the merged data frame
ped6
# merge the two data frames on the "id" column
ped6 <- merge(ped5, PX)
# print the merged data frame
ped6
# merge the two data frames on the "id" column
ped6 <- rbind(ped5, PX)
# print the merged data frame
ped6
Matrix2 <-kinship(ped6$LineName, ped6$FemaleParent, ped6$MaleParent)
write.csv(Matrix2, "matrixmerge.csv", row.names = TRUE)
PX <- PX[, c("LineName", "MaleParent", "FemaleParent")]
ped6 <- rbind(ped5, PX)
Matrix2 <-kinship(ped6$LineName, ped6$FemaleParent, ped6$MaleParent)
write.csv(Matrix2, "matrixmerge.csv", row.names = TRUE)
ped7 <- ped7 %>%
filter(substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName, nchar(LineName) - 9, nchar(LineName) - 5))
ped7 <- ped6 %>%
filter(substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName, nchar(LineName) - 9, nchar(LineName) - 5))
# print the filtered data frame
ped7
View(ped7)
View(ped7)
df_filtered <- ped6 %>%
group_by(MaleParent, FemaleParent) %>%
filter(n_distinct(LineName) > 1 | substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName[1], nchar(LineName[1]) - 4, nchar(LineName[1]))) %>%
ungroup()
# print the filtered data frame
df_filtered
View(df_filtered)
View(df_filtered)
ped7 <- ped6 %>%
group_by(MaleParent, FemaleParent) %>%
filter(n_distinct(LineName) > 1 | substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName[1], nchar(LineName[1]) - 4, nchar(LineName[1]))) %>%
ungroup()
ped7 <- ped6 %>%
group_by(MaleParent, FemaleParent) %>%
filter(n_distinct(LineName) > 1 | substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName[1], nchar(LineName[1]) - 4, nchar(LineName[1]))) %>%
ungroup() %>%
filter(!duplicated(., fromLast = TRUE))filtered data frame
df_filtered <- ped6 %>%
group_by(MaleParent, FemaleParent) %>%
filter(n_distinct(LineName) > 1 | substr(LineName, nchar(LineName) - 4, nchar(LineName)) != substr(LineName[1], nchar(LineName[1]) - 4, nchar(LineName[1]))) %>%
ungroup() %>%
filter(!duplicated(., fromLast = TRUE))
# print the filtered data frame
df_filtered
View(df_filtered)
View(df_filtered)
Matrixwrong <-kinship(df_filtered$LineName, df_filtered$FemaleParent, df_filtered$MaleParent)
write.csv(Matrixwrong, "matrixmerge.csv", row.names = TRUE)
A <- getA(ped6)
args(pedigree)
PED <- pedigree(ped6$MaleParent, ped6$FemaleParent, ped6$LineName)
View(PX)
View(PX)
View(ped5)
View(ped5)
View(PX)
View(PX)
PX <- PX[969:nrow(PX), ]
View(PX)
PX  <- read.csv("~/Coding Projects/Improving the Breeding Program/MasterPX/ZT_MasterPX.csv")
head(PX, 15)
tail(PX)
str(PX)
# keep only columns x and z
PX <- PX[, c("VARIETY", "FEMALE", "MALE")]
PX <- PX %>% mutate(LineName = gsub("-", "", VARIETY),
MaleParent = gsub("-", "", MALE),
FemaleParent = gsub("-", "", FEMALE))
PX <- PX[, c("LineName", "MaleParent", "FemaleParent")]
PX <- data.frame(PX)
PX1 <- PX[969:nrow(PX), ]
View(PX)
PX2 <- PX1[c(1:2020, 2054:nrow(df)), ]
PX2 <- PX1[c(1:2020, 2054:nrow(PX1)), ]
View(px2)
PX1 <- PX[969:nrow(PX), ]
View(PX1)
PX2 <- PX1[c(1:2020, 2054:nrow(PX1)), ]
View(PX2)
ped6 <- rbind(ped5, PX2)
Matrix5 <-kinship(ped65$LineName, ped65$FemaleParent, ped6$MaleParent)
Matrix5 <-kinship(ped6$LineName, ped6$FemaleParent, ped6$MaleParent)
View(ped5)
View(ped6)
ped6 <- ped6[complete.cases(ped6) | !is.na(ped6$FemaleParent) | !is.na(ped6$MaleParent) | !is.na(ped6$LineName), ]
Matrix5 <-kinship(ped6$LineName, ped6$FemaleParent, ped6$MaleParent)
Matrix5 <-kinship(ped6$LineName, ped6$FemaleParent, ped6$MaleParent)
ped6[duplicated(ped6$LineName) | duplicated(ped6$LineName), fromLast = TRUE), 1]
ped6[duplicated(ped6$LineName) | duplicated(ped6$LineName, fromLast = TRUE), 1]
ped6 <- duplicated(ped6[1, ], subset = "LineName")
ped6 <- ped6[!duplicated(ped6), ]
ped6[duplicated(ped6$LineName) | duplicated(ped6$LineName, fromLast = TRUE), 1]
ped6 <- rbind(ped5, PX2)
ped6[duplicated(ped6$LineName) | duplicated(ped6$LineName, fromLast = TRUE), 1]
ped8 <- ped6[complete.cases(ped6) | !is.na(ped6$LineName) | !is.na(ped6$MaleParent) | !is.na(ped6$FemaleParent), ]
ped8[duplicated(ped8$LineName) | duplicated(ped8$LineName, fromLast = TRUE), 1]
ped8_filtered <- ped8[!duplicated(ped8$LineName), ]
ped8 <- ped8[!duplicated(ped8$LineName), ]
Matrix5 <-kinship(ped8$LineName, ped8$FemaleParent, ped8$MaleParent)
setwd("~/Coding Projects/Improving the Breeding Program/MasterPX")
write.csv(Matrix5, "matrix5.csv", row.names = TRUE)
View(ped8)
View(ped8)
View(ped8)
View(ped8)
ped8a <- apply(ped8, 2, toupper)
View(ped8a)
View(ped8a)
View(ped8a)
ped8a <- as.data.frame(lapply(ped8, toupper))
Matrix5 <-kinship(ped8a$LineName, ped8a$FemaleParent, ped8a$MaleParent)
write.csv(Matrix5, "matrix5a.csv", row.names = TRUE)
write.table(ped8a5, "PED8a.txt", row.names=FALSE, col.names=TRUE, sep="\t")
write.table(ped8a, "PED8a.txt", row.names=FALSE, col.names=TRUE, sep="\t")
